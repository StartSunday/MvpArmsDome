apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}


//kapt {
//    arguments {
//        arg("AROUTER_MODULE_NAME", project.getName())
//    }
//}
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        applicationId "com.sun.mvparmsdome"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        multiDexEnabled true
        multiDexKeepProguard file('multiDexKeep.pro') // keep specific classes using proguard syntax

//        // 使用Cmake工具
//        externalNativeBuild {
//            cmake {
//                cppFlags ""
//                //生成多个版本的so文件
//                abiFilters 'arm64-v8a','armeabi-v7a','x86','x86_64'
//            }
//        }

    }

    //这个是ARouter需要配置的kapt
    kapt {
        arguments {
            arg("AROUTER_MODULE_NAME", project.getName())
        }
    }

    //这个是ARouter需要配置的kapt

    useLibrary 'org.apache.http.legacy'

    signingConfigs {
        release {
//            storeFile file("../key/card.jks")
//            storePassword "card2018"
//            keyAlias "fuzhou"
//            keyPassword "card2018"
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release


        }

        release {
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            buildConfigField "boolean", "IS_BUILD_MODULE", "${isBuildModule}"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
        }
    }

//    // 配置CMakeLists.txt路径
//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"  // 设置所要编写的c源码位置，以及编译后so文件的名字
//        }
//    }
    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }
//    sourceSets {
//        main {
//            jniLibs.srcDirs = ['libs']
//        }
//    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    //Kotlin中实现Parcelable的方式
    //
    //一、使用注解
    //1.在gradle中添加
    //使用Kotlin实验特性
    androidExtensions {
        experimental = true
    }


}

dependencies {
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    if (!isBuildModule.toBoolean()) {
        //在宿主 App 中使用 implementation 依赖业务组件, 业务组件的代码就会完全暴露给宿主 App, 不利于代码的隔离
        //使用 runtimeOnly 依赖业务组件, 可实现业务组件的代码在编译时对宿主 App 不可见, 仅在运行时对宿主 App 可见
        runtimeOnly project(":common_home")
        runtimeOnly project(":common_my")
        runtimeOnly project(":common_login")
//
    }
    implementation project(":CommonRes")//因为 CommonRes 依赖了 CommonSDK, 所以如果业务模块需要公共 UI 组件就依赖 CommonRes, 如果不需要就只依赖 CommonSDK
//    implementation project(":CommonService")
//    api project(":component_jiguang")

    //tools
    kapt rootProject.ext.dependencies["arouter-compiler"]
    kapt rootProject.ext.dependencies["dagger2-compiler"]
    //view
    kapt(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    //test
    testImplementation rootProject.ext.dependencies["junit"]
    debugImplementation rootProject.ext.dependencies["canary-debug"]
    releaseImplementation rootProject.ext.dependencies["canary-release"]
    testImplementation rootProject.ext.dependencies["canary-release"]
}
